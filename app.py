import streamlit as st
import pandas as pd
import datetime
import os
import yaml
from yaml.loader import SafeLoader
import matplotlib.pyplot as plt
import streamlit_authenticator as stauth

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="üìì Dziennik nastroju", layout="wide")

# --- –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
USERS_FILE = "users.yaml"
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w") as f:
        yaml.dump({"credentials": {"usernames": {}}}, f)

with open(USERS_FILE) as f:
    config = yaml.load(f, Loader=SafeLoader)

# --- –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é ---
if "Kasper" not in config["credentials"]["usernames"]:
    admin_hash = stauth.Hasher(["KlyxEanhybu1"]).generate()[0]
    config["credentials"]["usernames"]["Kasper"] = {
        "name": "Kasper Admin",
        "password": admin_hash,
        "role": "admin"
    }
    with open(USERS_FILE, "w") as f:
        yaml.dump(config, f)

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
authenticator = stauth.Authenticate(
    config['credentials'],
    "dziennik_cookie",
    "abcdef",
    cookie_expiry_days=1
)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–æ—à—ë–ª) ---
if st.session_state.get("authentication_status") is None:
    st.sidebar.subheader("üÜï Rejestracja")
    with st.sidebar.form("register_form"):
        new_name = st.text_input("Imiƒô i nazwisko")
        new_username = st.text_input("Login")
        new_password = st.text_input("Has≈Ço", type="password")
        reg_submitted = st.form_submit_button("Zarejestruj")

        if reg_submitted:
            if new_username in config["credentials"]["usernames"]:
                st.sidebar.error("‚ùå Taki login ju≈º istnieje")
            elif not new_name or not new_username or not new_password:
                st.sidebar.error("‚ö†Ô∏è Wszystkie pola sƒÖ wymagane")
            else:
                hashed = stauth.Hasher([new_password]).generate()[0]
                config["credentials"]["usernames"][new_username] = {
                    "name": new_name,
                    "password": hashed,
                    "role": "user"
                }
                with open(USERS_FILE, "w") as f:
                    yaml.dump(config, f)
                st.sidebar.success("‚úÖ Rejestracja udana! Mo≈ºesz siƒô zalogowaƒá.")

# --- –õ–æ–≥–∏–Ω ---
name, authentication_status, username = authenticator.login("Login", "sidebar")

if authentication_status == False:
    st.error("‚ùå Nieprawid≈Çowy login lub has≈Ço")
if authentication_status == None:
    st.warning("üîë Wprowad≈∫ login i has≈Ço")

# --- –ï—Å–ª–∏ –≤–æ—à—ë–ª ---
if authentication_status:

    authenticator.logout("üö™ Wyloguj", "sidebar")
    st.sidebar.success(f"Zalogowano: {name}")

    # --- –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    role = config["credentials"]["usernames"][username].get("role", "user")

    # --- –§–∞–π–ª CSV –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    os.makedirs("data", exist_ok=True)
    user_file = f"data/{username}.csv"

    COLUMNS = [
        "Data i czas",
        "Nastr√≥j (0-10)",
        "Poziom lƒôku/napiƒôcia (0-10)",
        "Objawy somatyczne",
        "Godzina za≈õniƒôcia",
        "Godzina wybudzenia",
        "Liczba wybudze≈Ñ w nocy",
        "Subiektywna jako≈õƒá snu (0-10)",
        "Energia/motywacja (0-10)",
        "Apetyt (0-10)",
        "Wykonane aktywno≈õci",
        "Zachowania impulsywne",
        "Uwagi"
    ]

    try:
        df = pd.read_csv(user_file)
    except FileNotFoundError:
        df = pd.DataFrame(columns=COLUMNS)

    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ ---
    OBJAWY = {
        "ks": "ko≈Çatanie serca", "d": "dr≈ºenie", "p": "nadmierne pocenie siƒô",
        "bb": "b√≥le brzucha", "w": "wymioty", "≈õ": "≈õcisk w klatce/duszno≈õƒá",
        "zg": "zawroty g≈Çowy", "gwg": "gula w gardle", "nm": "napiƒôcie miƒô≈õni",
        "m": "mrowienia", "bg": "b√≥l g≈Çowy", "bkl": "b√≥l w klatce piersiowej",
        "swu": "sucho≈õƒá w ustach"
    }
    AKTYWNOSCI = {"p": "praca", "n": "nauka", "d": "obowiƒÖzki domowe", "wf": "aktywno≈õƒá fizyczna"}
    IMPULSY = {"o≈º": "kompulsywne objadanie siƒô", "su": "samouszkodzenia", "z": "zakupy kompulsywne", "h": "hazard", "s": "seks ryzykowny"}

    # --- Layout –≤–∫–ª–∞–¥–æ–∫ ---
    tabs = ["‚úçÔ∏è Formularz", "üìë Historia", "üìà Wykresy"]
    if role == "admin":
        tabs.append("üë®‚Äç‚öïÔ∏è Panel admina")

    tab1, tab2, tab3, *extra = st.tabs(tabs)

    # --- TAB 1: Formularz ---
    with tab1:
        with st.form("nowy_wpis"):
            nastr√≥j = st.slider("Nastr√≥j", 0, 10, 5)
            lƒôk = st.slider("Poziom lƒôku/napiƒôcia", 0, 10, 5)

            st.markdown("**Objawy somatyczne**")
            wybrane_objawy = [n for k, n in OBJAWY.items() if st.checkbox(n, key=f"objaw_{k}")]

            zasniecie = st.time_input("Godzina za≈õniƒôcia", datetime.time(23,0))
            pobudka = st.time_input("Godzina wybudzenia", datetime.time(7,0))
            wybudzenia = st.number_input("Liczba wybudze≈Ñ w nocy", 0, 20, 0)
            jakosc_snu = st.slider("Subiektywna jako≈õƒá snu", 0, 10, 5)
            energia = st.slider("Energia/motywacja do dzia≈Çania", 0, 10, 5)
            apetyt = st.slider("Apetyt", 0, 10, 5)

            st.markdown("**Wykonane aktywno≈õci**")
            wybrane_aktywnosci = [n for k, n in AKTYWNOSCI.items() if st.checkbox(n, key=f"aktywnosc_{k}")]

            st.markdown("**Zachowania impulsywne**")
            wybrane_impulsy = [n for k, n in IMPULSY.items() if st.checkbox(n, key=f"impuls_{k}")]

            uwagi = st.text_area("Uwagi dodatkowe")

            submitted = st.form_submit_button("üíæ Zapisz wpis")

        if submitted:
            new_row = {
                "Data i czas": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
                "Nastr√≥j (0-10)": nastr√≥j,
                "Poziom lƒôku/napiƒôcia (0-10)": lƒôk,
                "Objawy somatyczne": ", ".join(wybrane_objawy),
                "Godzina za≈õniƒôcia": zasniecie.strftime("%H:%M"),
                "Godzina wybudzenia": pobudka.strftime("%H:%M"),
                "Liczba wybudze≈Ñ w nocy": wybudzenia,
                "Subiektywna jako≈õƒá snu (0-10)": jakosc_snu,
                "Energia/motywacja (0-10)": energia,
                "Apetyt (0-10)": apetyt,
                "Wykonane aktywno≈õci": ", ".join(wybrane_aktywnosci),
                "Zachowania impulsywne": ", ".join(wybrane_impulsy),
                "Uwagi": uwagi
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            df.to_csv(user_file, index=False)
            st.success("‚úÖ Wpis dodany!")

    # --- TAB 2: Historia ---
    with tab2:
        st.subheader("Historia wpis√≥w")
        st.dataframe(df, use_container_width=True)

        st.markdown("### üì§ Eksport danych")
        csv = df.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è Pobierz CSV", data=csv, file_name=f"{username}_dziennik.csv", mime="text/csv")

    # --- TAB 3: Wykresy ---
    with tab3:
        if not df.empty:
            df["Data i czas"] = pd.to_datetime(df["Data i czas"])
            st.subheader("üìà Trendy w czasie")

            fig, ax = plt.subplots()
            for col, label in [
                ("Nastr√≥j (0-10)", "Nastr√≥j"),
                ("Poziom lƒôku/napiƒôcia (0-10)", "Lƒôk"),
                ("Energia/motywacja (0-10)", "Energia"),
                ("Apetyt (0-10)", "Apetyt")
            ]:
                if col in df:
                    ax.plot(df["Data i czas"], df[col], marker="o", label=label)

            low = df[df["Nastr√≥j (0-10)"] < 3]
            if not low.empty:
                ax.scatter(low["Data i czas"], low["Nastr√≥j (0-10)"], color="red", s=60, zorder=5, label="Bardzo niski nastr√≥j")

            ax.set_ylabel("Poziom (0‚Äì10)")
            ax.set_xlabel("Data")
            ax.legend()
            plt.xticks(rotation=45)

            st.pyplot(fig)

            # --- Wykresy snu ---
            st.subheader("üåô Sen")

            # konwersja czasu snu do godzin i obliczanie d≈Çugo≈õci snu
            df["Za≈õniƒôcie_dt"] = pd.to_datetime(df["Godzina za≈õniƒôcia"], format="%H:%M", errors="coerce")
            df["Pobudka_dt"] = pd.to_datetime(df["Godzina wybudzenia"], format="%H:%M", errors="coerce")

            df["Godzina za≈õniƒôcia (h)"] = df["Za≈õniƒôcie_dt"].dt.hour + df["Za≈õniƒôcie_dt"].dt.minute / 60
            df["Godzina wybudzenia (h)"] = df["Pobudka_dt"].dt.hour + df["Pobudka_dt"].dt.minute / 60
            df["D≈Çugo≈õƒá snu (h)"] = (df["Pobudka_dt"] - df["Za≈õniƒôcie_dt"]).dt.total_seconds() / 3600

            fig, ax = plt.subplots()
            ax.plot(df["Data i czas"], df["Godzina za≈õniƒôcia (h)"], marker="o", label="Za≈õniƒôcie (godz.)")
            ax.plot(df["Data i czas"], df["Godzina wybudzenia (h)"], marker="o", label="Pobudka (godz.)")

            if "Liczba wybudze≈Ñ w nocy" in df:
                ax.plot(df["Data i czas"], df["Liczba wybudze≈Ñ w nocy"], marker="x", label="Wybudzenia w nocy")

            if "Subiektywna jako≈õƒá snu (0-10)" in df:
                ax.plot(df["Data i czas"], df["Subiektywna jako≈õƒá snu (0-10)"], marker="s", label="Jako≈õƒá snu (0-10)")

            if "D≈Çugo≈õƒá snu (h)" in df:
                ax.plot(df["Data i czas"], df["D≈Çugo≈õƒá snu (h)"], marker="d", label="D≈Çugo≈õƒá snu (h)")

            ax.set_ylabel("Warto≈õci snu")
            ax.set_xlabel("Data")
            ax.legend()
            plt.xticks(rotation=45)

            st.pyplot(fig)

        else:
            st.info("Brak danych do wizualizacji.")

    # --- TAB 4: Panel admina ---
    if role == "admin" and extra:
        with extra[0]:
            st.subheader("üë®‚Äç‚öïÔ∏è Panel admina ‚Äì dane pacjent√≥w")

            files = [f for f in os.listdir("data") if f.endswith(".csv")]
            patients = [f.replace(".csv", "") for f in files]

            selected_user = st.selectbox("Wybierz pacjenta", patients)

            if selected_user:
                file_path = os.path.join("data", f"{selected_user}.csv")
                if os.path.exists(file_path):
                    df_patient = pd.read_csv(file_path)

                    if not df_patient.empty:
                        st.write(f"üìÑ Dane pacjenta: **{selected_user}**")
                        st.dataframe(df_patient, use_container_width=True)

                        # --- Skr√≥t: objawy + impulsy ---
                        st.markdown("### üìä Objawy somatyczne i zachowania impulsywne")
                        table_summary = df_patient[["Data i czas", "Objawy somatyczne", "Zachowania impulsywne"]]
                        st.dataframe(table_summary, use_container_width=True)

                        # --- Eksport ---
                        st.markdown("### üì§ Eksport danych pacjenta")
                        csv = df_patient.to_csv(index=False).encode("utf-8")
                        st.download_button(
                            "‚¨áÔ∏è Pobierz CSV",
                            data=csv,
                            file_name=f"{selected_user}_dziennik.csv",
                            mime="text/csv"
                        )

                        try:
                            import io, openpyxl
                            buffer = io.BytesIO()
                            df_patient.to_excel(buffer, index=False, engine="openpyxl")
                            st.download_button(
                                "‚¨áÔ∏è Pobierz XLSX",
                                data=buffer.getvalue(),
                                file_name=f"{selected_user}_dziennik.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        except ImportError:
                            st.info("üìé Eksport do XLSX wymaga pakietu `openpyxl`.")

                        # --- Wykresy ---
                        df_patient["Data i czas"] = pd.to_datetime(df_patient["Data i czas"])
                        st.subheader("üìà Trendy pacjenta")

                        fig, ax = plt.subplots()
                        for col, label in [
                            ("Nastr√≥j (0-10)", "Nastr√≥j"),
                            ("Poziom lƒôku/napiƒôcia (0-10)", "Lƒôk"),
                            ("Energia/motywacja (0-10)", "Energia"),
                            ("Apetyt (0-10)", "Apetyt")
                        ]:
                            if col in df_patient:
                                ax.plot(df_patient["Data i czas"], df_patient[col], marker="o", label=label)

                        low = df_patient[df_patient["Nastr√≥j (0-10)"] < 3]
                        if not low.empty:
                            ax.scatter(
                                low["Data i czas"],
                                low["Nastr√≥j (0-10)"],
                                color="red",
                                s=60,
                                zorder=5,
                                label="Bardzo niski nastr√≥j"
                            )

                        ax.set_ylabel("Poziom (0‚Äì10)")
                        ax.set_xlabel("Data")
                        ax.legend()
                        plt.xticks(rotation=45)

                        st.pyplot(fig)

                        # --- Wykresy snu ---
                        st.subheader("üåô Sen pacjenta")

                        # konwersja czasu i obliczanie d≈Çugo≈õci snu
                        df_patient["Za≈õniƒôcie_dt"] = pd.to_datetime(
                            df_patient["Godzina za≈õniƒôcia"], format="%H:%M", errors="coerce"
                        )
                        df_patient["Pobudka_dt"] = pd.to_datetime(
                            df_patient["Godzina wybudzenia"], format="%H:%M", errors="coerce"
                        )

                        df_patient["Godzina za≈õniƒôcia (h)"] = (
                            df_patient["Za≈õniƒôcie_dt"].dt.hour + df_patient["Za≈õniƒôcie_dt"].dt.minute / 60
                        )
                        df_patient["Godzina wybudzenia (h)"] = (
                            df_patient["Pobudka_dt"].dt.hour + df_patient["Pobudka_dt"].dt.minute / 60
                        )
                        df_patient["D≈Çugo≈õƒá snu (h)"] = (
                            (df_patient["Pobudka_dt"] - df_patient["Za≈õniƒôcie_dt"]).dt.total_seconds() / 3600
                        )

                        # --- wykres snu ---
                        fig, ax = plt.subplots()
                        if "Godzina za≈õniƒôcia (h)" in df_patient:
                            ax.plot(
                                df_patient["Data i czas"],
                                df_patient["Godzina za≈õniƒôcia (h)"],
                                marker="o",
                                label="Za≈õniƒôcie (godz.)"
                            )
                        if "Godzina wybudzenia (h)" in df_patient:
                            ax.plot(
                                df_patient["Data i czas"],
                                df_patient["Godzina wybudzenia (h)"],
                                marker="o",
                                label="Pobudka (godz.)"
                            )
                        if "Liczba wybudze≈Ñ w nocy" in df_patient:
                            ax.plot(
                                df_patient["Data i czas"],
                                df_patient["Liczba wybudze≈Ñ w nocy"],
                                marker="x",
                                label="Wybudzenia w nocy"
                            )
                        if "Subiektywna jako≈õƒá snu (0-10)" in df_patient:
                            ax.plot(
                                df_patient["Data i czas"],
                                df_patient["Subiektywna jako≈õƒá snu (0-10)"],
                                marker="s",
                                label="Jako≈õƒá snu (0-10)"
                            )
                        if "D≈Çugo≈õƒá snu (h)" in df_patient:
                            ax.plot(
                                df_patient["Data i czas"],
                                df_patient["D≈Çugo≈õƒá snu (h)"],
                                marker="d",
                                label="D≈Çugo≈õƒá snu (h)"
                            )

                        ax.set_ylabel("Parametry snu")
                        ax.set_xlabel("Data")
                        ax.legend()
                        plt.xticks(rotation=45)

                        st.pyplot(fig)

                        # --- statystyki snu ---
                        st.markdown("### üìä Statystyki snu")
                        avg_sleep = df_patient["D≈Çugo≈õƒá snu (h)"].mean(skipna=True)
                        avg_wakeups = df_patient["Liczba wybudze≈Ñ w nocy"].mean(skipna=True)
                        avg_quality = df_patient["Subiektywna jako≈õƒá snu (0-10)"].mean(skipna=True)

                        col1, col2, col3 = st.columns(3)
                        col1.metric(
                            "≈örednia d≈Çugo≈õƒá snu",
                            f"{avg_sleep:.1f} h" if not pd.isna(avg_sleep) else "‚Äì"
                        )
                        col2.metric(
                            "≈örednia liczba wybudze≈Ñ",
                            f"{avg_wakeups:.1f}" if not pd.isna(avg_wakeups) else "‚Äì"
                        )
                        col3.metric(
                            "≈örednia jako≈õƒá snu",
                            f"{avg_quality:.1f}/10" if not pd.isna(avg_quality) else "‚Äì"
                        )



                    else:
                        st.info("Brak zapisanych wpis√≥w dla tego pacjenta.")
                else:
                    st.info("Brak danych dla tego pacjenta.")
